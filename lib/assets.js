// Generated by CoffeeScript 2.0.0-beta8
void function () {
  var basename, slugify, vidius;
  vidius = null != window.vidius ? window.vidius : window.vidius = {};
  basename = function (path) {
    var cache$, cache$1;
    cache$ = null != (cache$1 = /([^/]+)$/.exec(path)) ? cache$1[1] : void 0;
    return null != cache$ ? cache$ : path;
  };
  slugify = function (str) {
    return str.replace(/[^a-z0-9_]+/g, '_');
  };
  vidius.Assets = function () {
    function Assets() {
      this.promises = {};
    }
    Assets.prototype.wait = function () {
      var promise, src;
      return Q.all(function (accum$) {
        for (src in this.promises) {
          promise = this.promises[src];
          accum$.push(promise);
        }
        return accum$;
      }.call(this, [])).thenResolve(this);
    };
    Assets.prototype.loadText = function (src) {
      if (null != this.promises[src])
        this.promises[src];
      else
        this.promises[src] = Q.promise(function (resolve, reject) {
          var xhr;
          xhr = new XMLHttpRequest;
          xhr.addEventListener('load', function () {
            return resolve(xhr.responseText);
          }, false);
          xhr.addEventListener('error', reject, false);
          xhr.open('GET', src);
          return xhr.send();
        }).then(function (this$) {
          return function (text) {
            return this$[slugify(basename(src))] = text;
          };
        }(this));
      return this;
    };
    Assets.prototype.loadImage = function (src) {
      if (null != this.promises[src])
        this.promises[src];
      else
        this.promises[src] = Q.promise(function (resolve, reject) {
          var image;
          image = new Image;
          image.addEventListener('load', function () {
            return resolve(image);
          }, false);
          image.addEventListener('error', reject, false);
          return image.src = src;
        }).then(function (this$) {
          return function (image) {
            return this$[slugify(basename(src))] = image;
          };
        }(this));
      return this;
    };
    Assets.prototype.loadSample = function (src) {
      if (null != this.promises[src])
        this.promises[src];
      else
        this.promises[src] = Q.promise(function (resolve, reject) {
          var sample;
          sample = new Audio;
          sample.addEventListener('canplay', function () {
            return resolve(sample);
          }, false);
          sample.addEventListener('error', reject, false);
          sample.src = src;
          return sample.load();
        }).then(function (this$) {
          return function (sample) {
            return this$[slugify(basename(src))] = sample;
          };
        }(this));
      return this;
    };
    return Assets;
  }();
}.call(this);

//# sourceMappingURL=assets.map
