// Generated by CoffeeScript 2.0.0-beta8
void function () {
  var debounce, domReady;
  domReady = Q.promise(function (resolve) {
    var handler;
    handler = resolve.bind(null, document);
    document.addEventListener('DOMContentLoaded', handler, false);
    return window.addEventListener('load', handler, false);
  });
  debounce = function (ms, func) {
    var callback, savedArgs, savedContext, timeout;
    timeout = null;
    savedContext = null;
    savedArgs = null;
    callback = function () {
      return func.apply(savedContext, savedArgs);
    };
    return function (args) {
      args = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];
      if (null != timeout)
        clearTimeout(timeout);
      savedContext = this;
      savedArgs = args;
      timeout = setTimeout(callback, ms);
    };
  };
  domReady.then(function () {
    if (!(location.hash && document.querySelector('' + location.hash + '.section')))
      location.hash = '#toc';
    return new vidius.Assets().loadText('shaders/sprite-renderer.glsl').loadImage('assets/arrow.png').loadImage('assets/cursor.png').loadImage('assets/electric.png').loadImage('assets/font.png').loadImage('assets/overlay.png').loadImage('assets/vidius.png').loadSample('assets/bang.wav').loadSample('assets/beep.wav').loadSample('assets/donk.wav').wait();
  }).then(function (assets) {
    var arrow, cursor, debugView, displayList, font, logo1, logo2;
    vidius.DisplayList.prototype.shaderSource = assets.sprite_renderer_glsl;
    displayList = new vidius.DisplayList(document.getElementById('display'), 256, 192, 256, assets.overlay_png);
    font = new vidius.BitmapFont(assets.font_png);
    logo1 = displayList.createSprite(assets.vidius_png).move(80, -32);
    logo2 = displayList.createSprite(assets.electric_png).move(80, 104);
    arrow = displayList.createSprite(assets.arrow_png).move(80, 176);
    cursor = displayList.createSprite(assets.cursor_png).move(0, 0);
    debugView = document.querySelector('#debug');
    debugView.appendChild(displayList.texturePacker.texture);
    debugView.appendChild(font.image);
    document.addEventListener('keydown', function (event) {
      if (event.keyCode === 192)
        if (debugView.style.display === 'block') {
          return debugView.style.display = 'none';
        } else {
          return debugView.style.display = 'block';
        }
    }, false);
    new TWEEN.Tween(logo1.pos).to({ y: 80 }, 2e3).onStart(function () {
      return displayList.add(logo1);
    }).onComplete(function () {
      var activeSection, element, i, link, sections, showSection;
      displayList.add(logo2);
      setTimeout(function () {
        return new TWEEN.Tween(arrow.pos).to({ y: arrow.pos.y - 16 }, 500).easing(TWEEN.Easing.Quadratic.InOut).repeat(5).yoyo(true).onStart(function () {
          return displayList.add(arrow);
        }).onComplete(function () {
          return displayList.remove(arrow);
        }).start();
      }, 500);
      assets.bang_wav.play();
      activeSection = null;
      sections = {};
      for (var cache$ = document.querySelectorAll('.section'), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
        element = cache$[i$];
        sections[element.id] = {
          id: element.id,
          element: element,
          sprites: function (accum$) {
            for (var cache$1 = element.querySelectorAll('.navigation a'), i$1 = 0, length$1 = cache$1.length; i$1 < length$1; ++i$1) {
              link = cache$1[i$1];
              i = i$1;
              accum$.push(function (link) {
                var image, x, y;
                image = font.textToImage(link.textContent);
                x = (256 - image.width) / 2;
                y = 120 + i * font.height;
                link.addEventListener('mouseenter', function () {
                  cursor.move(x - 16, y);
                  displayList.add(cursor);
                  assets.beep_wav.currentTime = 0;
                  return assets.beep_wav.play();
                }, false);
                link.addEventListener('mouseleave', function () {
                  return displayList.remove(cursor);
                }, false);
                return displayList.createSprite(image).move(x, y);
              }(link));
            }
            return accum$;
          }.call(this, [])
        };
      }
      showSection = function (id) {
        var sprite;
        displayList.remove(cursor);
        if (null != activeSection)
          for (var i$2 = 0, length$2 = activeSection.sprites.length; i$2 < length$2; ++i$2) {
            sprite = activeSection.sprites[i$2];
            displayList.remove(sprite);
          }
        if (null != (activeSection = sections[id]))
          for (var i$3 = 0, length$3 = activeSection.sprites.length; i$3 < length$3; ++i$3) {
            sprite = activeSection.sprites[i$3];
            displayList.add(sprite);
          }
      };
      window.onhashchange = function () {
        assets.donk_wav.currentTime = 0;
        assets.donk_wav.play();
        return showSection(location.hash.slice(1));
      };
      return showSection(location.hash.slice(1));
    }).start();
    return displayList.start();
  }).done();
}.call(this);

//# sourceMappingURL=bootlogo.map
