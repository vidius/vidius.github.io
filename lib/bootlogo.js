// Generated by CoffeeScript 2.0.0-beta8
void function () {
  var basename, debounce, domReady, loadImage, loadSample, loadText;
  domReady = Q.promise(function (resolve) {
    var handler;
    handler = resolve.bind(null, document);
    document.addEventListener('DOMContentLoaded', handler, false);
    return window.addEventListener('load', handler, false);
  });
  basename = function (path) {
    var cache$, cache$1;
    cache$ = null != (cache$1 = /([^/]+)$/.exec(path)) ? cache$1[1] : void 0;
    return null != cache$ ? cache$ : path;
  };
  loadText = function (obj, src) {
    return Q.promise(function (resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest;
      xhr.addEventListener('load', function () {
        return resolve(xhr.responseText);
      }, false);
      xhr.addEventListener('error', reject, false);
      xhr.open('GET', src);
      return xhr.send();
    }).then(function (text) {
      return obj[basename(src)] = text;
    });
  };
  loadImage = function (obj, src) {
    return Q.promise(function (resolve, reject) {
      var image;
      image = new Image;
      image.addEventListener('load', function () {
        return resolve(image);
      }, false);
      image.addEventListener('error', reject, false);
      return image.src = src;
    }).then(function (image) {
      return obj[basename(src)] = image;
    });
  };
  loadSample = function (obj, src) {
    return Q.promise(function (resolve, reject) {
      var sample;
      sample = new Audio;
      sample.addEventListener('canplay', function () {
        return resolve(sample);
      }, false);
      sample.addEventListener('error', reject, false);
      sample.src = src;
      return sample.load();
    }).then(function (sample) {
      return obj[basename(src)] = sample;
    });
  };
  debounce = function (ms, func) {
    var callback, savedArgs, savedContext, timeout;
    timeout = null;
    savedContext = null;
    savedArgs = null;
    callback = function () {
      return func.apply(savedContext, savedArgs);
    };
    return function (args) {
      args = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];
      if (null != timeout)
        clearTimeout(timeout);
      savedContext = this;
      savedArgs = args;
      timeout = setTimeout(callback, ms);
    };
  };
  domReady.then(function () {
    var assets;
    assets = {};
    return Q.all([
      loadText(assets, 'shaders/sprite-renderer.glsl'),
      loadImage(assets, 'assets/arrow.png'),
      loadImage(assets, 'assets/cursor.png'),
      loadImage(assets, 'assets/electric.png'),
      loadImage(assets, 'assets/font.png'),
      loadImage(assets, 'assets/overlay.png'),
      loadImage(assets, 'assets/vidius.png'),
      loadSample(assets, 'assets/bang.wav'),
      loadSample(assets, 'assets/beep.wav'),
      loadSample(assets, 'assets/donk.wav')
    ]).thenResolve(assets);
  }).then(function (assets) {
    var arrow, cursor, debugView, displayList, font, logo1, logo2, packer;
    DisplayList.prototype.shaderSource = assets['sprite-renderer.glsl'];
    displayList = new gfx.DisplayList(document.getElementById('display'), 256, 192, 128, assets['overlay.png']);
    font = new gfx.BitmapFont(assets['font.png']);
    packer = new gfx.TexturePacker(128);
    logo1 = displayList.createSprite(assets['vidius.png']).move(80, -32);
    logo2 = displayList.createSprite(assets['electric.png']).move(80, 104);
    arrow = displayList.createSprite(assets['arrow.png']).move(80, 176);
    cursor = displayList.createSprite(assets['cursor.png']).move(0, 0);
    debugView = document.querySelector('#debug');
    debugView.appendChild(displayList.texturePacker.texture);
    debugView.appendChild(font.image);
    document.addEventListener('keydown', function (event) {
      if (event.keyCode === 192)
        if (debugView.style.display === 'block') {
          return debugView.style.display = 'none';
        } else {
          return debugView.style.display = 'block';
        }
    }, false);
    new TWEEN.Tween(logo1.pos).to({ y: 80 }, 2e3).onStart(function () {
      return displayList.add(logo1);
    }).onComplete(function () {
      var i, link;
      displayList.add(logo2);
      setTimeout(function () {
        return new TWEEN.Tween(arrow.pos).to({ y: arrow.pos.y - 16 }, 500).easing(TWEEN.Easing.Quadratic.InOut).repeat(5).yoyo(true).onStart(function () {
          return displayList.add(arrow);
        }).onComplete(function () {
          return displayList.remove(arrow);
        }).start();
      }, 500);
      assets['bang.wav'].play();
      document.querySelector('#navigation').classList.add('highlight');
      return function (accum$) {
        for (var cache$ = document.querySelectorAll('#navigation a'), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
          link = cache$[i$];
          i = i$;
          accum$.push(function (link) {
            var image, sprite, x, y;
            image = font.textToImage(link.textContent);
            x = (256 - image.width) / 2;
            y = 120 + i * font.height;
            sprite = displayList.createSprite(image).move(x, y);
            displayList.add(sprite);
            link.addEventListener('mouseenter', function () {
              cursor.move(x - 16, y);
              displayList.add(cursor);
              assets['donk.wav'].pause();
              assets['beep.wav'].currentTime = 0;
              return assets['beep.wav'].play();
            }, false);
            return link.addEventListener('mouseleave', function () {
              displayList.remove(cursor);
              assets['beep.wav'].pause();
              assets['donk.wav'].currentTime = 0;
              return assets['donk.wav'].play();
            }, false);
          }(link));
        }
        return accum$;
      }.call(this, []);
    }).start();
    return displayList.start();
  }).done();
}.call(this);

//# sourceMappingURL=bootlogo.map
