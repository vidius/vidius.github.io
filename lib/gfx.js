// Generated by CoffeeScript 2.0.0-beta8
void function () {
  var byPriority;
  BitmapFont = function () {
    function BitmapFont(param$) {
      this.image = param$;
      this.width = this.image.width / 16;
      this.height = this.image.height / 16;
    }
    BitmapFont.prototype.textWidth = function (text) {
      return text.length * this.width;
    };
    BitmapFont.prototype.drawCharCode = function (context, code, x, y) {
      var sx, sy;
      sx = this.width * (code & 15);
      sy = this.height * (code >> 4);
      context.drawImage(this.image, sx, sy, this.width, this.height, x, y, this.width, this.height);
    };
    BitmapFont.prototype.drawText = function (context, text, x, y) {
      var i;
      for (var cache$ = function () {
            var accum$;
            accum$ = [];
            for (var i$ = 0; 0 <= text.length ? i$ < text.length : i$ > text.length; 0 <= text.length ? ++i$ : --i$)
              accum$.push(i$);
            return accum$;
          }.apply(this, arguments), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
        i = cache$[i$];
        this.drawCharCode(context, text.charCodeAt(i), x, y);
        x += this.width;
      }
    };
    BitmapFont.prototype.textToImage = function (text) {
      var canvas, context;
      canvas = document.createElement('canvas');
      canvas.width = this.textWidth(text);
      canvas.height = this.height;
      context = canvas.getContext('2d');
      this.drawText(context, text, 0, 0);
      return canvas;
    };
    return BitmapFont;
  }();
  Sprite = function () {
    function Sprite(param$, param$1, param$2, param$3) {
      this.image = param$;
      this.x = param$1;
      this.y = param$2;
      if (null == param$3)
        param$3 = 0;
      this.priority = param$3;
      this.width = null != this.image.width ? this.image.width : 0;
      this.height = null != this.image.height ? this.image.height : 0;
    }
    Sprite.prototype.test = function (x, y) {
      return x >= this.x && x < this.x + this.width && y >= this.y && y < this.y + this.height;
    };
    return Sprite;
  }();
  DisplayList = function () {
    byPriority = function (a, b) {
      return a.priority - b.priority;
    };
    function DisplayList(param$) {
      this.context = param$;
      this.sprites = [];
      this.scale = 1;
    }
    DisplayList.prototype.add = function (sprite) {
      if (this.sprites.indexOf(sprite) === -1)
        this.sprites.push(sprite);
      this.sprites.sort(byPriority);
      return this;
    };
    DisplayList.prototype.remove = function (sprite) {
      var i;
      if ((i = this.sprites.indexOf(sprite)) !== -1)
        this.sprites.splice(i, 1);
      return this;
    };
    DisplayList.prototype.clear = function () {
      this.sprites.splice(0);
      return this;
    };
    DisplayList.prototype.query = function (x, y) {
      var sprite;
      for (var i$ = 0, length$ = this.sprites.length; i$ < length$; ++i$) {
        sprite = this.sprites[i$];
        if (!sprite.test(x, y))
          continue;
        return sprite;
      }
      return null;
    };
    DisplayList.prototype.draw = function () {
      var cache$, image, x, y;
      this.context.save();
      this.context.setTransform(1, 0, 0, 1, 0, 0);
      this.context.scale(this.scale, this.scale);
      for (var i$ = 0, length$ = this.sprites.length; i$ < length$; ++i$) {
        {
          cache$ = this.sprites[i$];
          image = cache$.image;
          x = cache$.x;
          y = cache$.y;
        }
        this.context.drawImage(image, 0 | x, 0 | y);
      }
      this.context.restore();
    };
    return DisplayList;
  }();
  window.gfx = {
    BitmapFont: BitmapFont,
    DisplayList: DisplayList,
    Sprite: Sprite
  };
}.call(this);

//# sourceMappingURL=gfx.map
